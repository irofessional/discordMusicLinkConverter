name: Deploy

on:
  pull_request:
    branches:
      - master
    types: 
      - closed

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  AWS_ACTIONS_ROLE_ARN: ${{ secrets.AWS_ACTIONS_ROLE_ARN }} 

jobs:
  terraform:
    name: Terraform Apply
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true

    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ap-northeast-1
          role-to-assume: ${{ env.AWS_ACTIONS_ROLE_ARN }}

      - name: Terraform setup
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        id: init
        working-directory: terraform
        run: terraform init

      - name: Terraform Apply
        id: apply
        working-directory: terraform
        continue-on-error: true
        run: terraform apply -input=false -auto-approve

      - uses: actions/github-script@0.9.0
        env:
          APPLY: "terraform\n${{ steps.apply.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Apply üìñ\`${{ steps.apply.outcome }}\`

            <details><summary>Show Apply</summary>

            \`\`\`${process.env.APPLY}\`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Check on failures
        if: steps.apply.outcome == 'failure'
        run: exit 1


  build:
    name: Build and push
    runs-on: ubuntu-latest
    needs: terraform
    if: github.event.pull_request.merged == true

    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: Setup docker
        uses: docker/setup-buildx-action@v1

      - name: configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ap-northeast-1
          role-to-assume: ${{ env.AWS_ACTIONS_ROLE_ARN }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Get short commit hash
        id: get-hash
        working-directory: .
        env:
          ECR_URI: ${{ secrets.ECR_URI }}
        run: |
          echo "ECR_TAG=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "IMAGE_TAG=${{ env.ECR_URI }}:$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Build and push image
        uses: docker/build-push-action@v2
        id: build-image
        with:
          push: true
          tags: ${{ env.IMAGE_TAG }}
          context: .
          file: ./Dockerfile


  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    if: github.event.pull_request.merged == true

    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: Setup ecspresso
        uses: kayac/ecspresso@v1
        with:
          version: latest
      
      - name: configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ap-northeast-1
          role-to-assume: ${{ env.AWS_ACTIONS_ROLE_ARN }}
      
      - name: Deploy to ECS
        working-directory: ./ecspresso
        run: |
          ecspresso deploy --config config.yml
