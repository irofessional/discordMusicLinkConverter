name: Terraform plan

on:
  pull_request:
    types: 
      - opened
      - synchronize
    branches: 
      - master

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    name: "Terraform Plan"
    runs-on: ubuntu-latest

    env:
      TF_VAR_discord_bot_token: ${{ secrets.DISCORD_BOT_TOKEN }}
      TF_VAR_discord_bot_category: ${{ secrets.DISCORD_BOT_CATEGORY }}

    steps:
      - name: checkout
        uses: actions/checkout@v2
      
      - name: configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ap-northeast-1
          role-to-assume: ${{ secrets.AWS_ACTIONS_ROLE_ARN }}

      - name: Terraform setup
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Terraform Validate
        working-directory: terraform
        run: terraform validate

      - name: Terraform plan
        working-directory: terraform
        shell: bash
        run: terraform plan -input=false

  build:
    name: Build and push
    runs-on: ubuntu-latest
    needs: terraform

    env:
      TF_VAR_discord_bot_token: ${{ secrets.DISCORD_BOT_TOKEN }}
      TF_VAR_discord_bot_category: ${{ secrets.DISCORD_BOT_CATEGORY }}

    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: Setup docker
        uses: docker/setup-buildx-action@v1

      - name: configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ap-northeast-1
          role-to-assume: ${{ env.AWS_ACTIONS_ROLE_ARN }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Get short commit hash
        id: get-hash
        working-directory: .
        run: |
          echo "ECR_TAG=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "IMAGE_TAG=${{ env.ECR_URI }}:$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: output image tag
        run: |
          echo "${{ env.IMAGE_TAG }}"

      - name: Build and push image
        uses: docker/build-push-action@v2
        id: build-image
        with:
          push: true
          tags: ${{ env.IMAGE_TAG }}
          context: .
          file: ./Dockerfile